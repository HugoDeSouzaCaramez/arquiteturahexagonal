mvn archetype:generate -DgroupId=com.arquiteturahexagonal -DartifactId=arquiteturahexagonal -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false


No adaptador REST, temos o método httpParams para recuperar dados de uma solicitação HTTP
Agora, em processRequest do adaptador CLI, temos um método stdinParams para recuperar dados do console.
Os métodos processRequest dos adaptadores REST e CLI têm diferenças em como eles manipulam
dados de entrada, mas ambos têm uma coisa em comum. Uma vez que eles capturam dados de
entrada na variável params , ambos chamam o método addNetworkToRouter herdado da classe base do adaptador
Deste ponto em diante, os dados seguem o mesmo fluxo descrito no cenário do adaptador REST, onde o
adaptador de entrada chama a porta de entrada por meio de uma referência de interface de caso de uso.


compilar: mvn clean package
Para chamar o adaptador REST, execute o arquivo .jar com o parâmetro rest: $ java -jar target/chapter04-1.0-SNAPSHOT-jar-with-dependencies.
                                                                           jar rest
                                                                           REST endpoint listening on port 8080…
Assim que o aplicativo estiver em execução, você pode iniciar uma solicitação HTTP GET para criar e adicionar uma rede: curl -vv "http://localhost:8080/network/add?routerId=ca23800e9b5a-11eb-a8b3-0242ac130003&address=40.0.0.0&name=Finance&c
Para chamar o adaptador CLI, execute o arquivo .jar sem parâmetros: $ java -jar target/chapter04-1.0-SNAPSHOT-jar-with-dependencies.
                                                                    jar cli
                                                                    Please inform the Router ID:
                                                                    ca23800e-9b5a-11eb-a8b3-0242ac130003
                                                                    Please inform the IP address:
                                                                    40.0.0.0
                                                                    Please inform the Network Name:
                                                                    Finance
                                                                    Please inform the CIDR:
                                                                    8 idr=8"

O aplicativo pedirá que você especifique o ID do roteador e outros detalhes adicionais da rede para chamar o adaptador
CLI. Aqui, fornecemos os mesmos dados usados para chamar o adaptador REST.



Os adaptadores de entrada são as portas da frente pelas quais acessamos todos os recursos que um aplicativo
hexagonal pode fornecer. Com adaptadores de entrada, podemos facilmente tornar o sistema acessível por meio de
diferentes tecnologias sem perturbar a lógica de negócios. Da mesma forma, podemos fazer o aplicativo hexagonal
falar com várias fontes de dados. Fazemos isso com adaptadores de saída.


Adaptadores de saída são implementações das portas de saída que criamos no hexágono de aplicação


Embora os switches e as redes tenham chaves primárias, tratamos os switches como entidades e redes
como objetos de valor que são parte da entidade Router no modelo de domínio. Estamos
impondo nosso modelo no arranjo tecnológico e não o contrário.

Não usamos essas chaves primárias das tabelas switches e networks como referências no
modelo de domínio. Em vez disso, usamos o valor router_id para correlacionar a entidade
Router com seus objetos de valor Switch e Network e suas respectivas tabelas de banco de
dados. Essa correlação permite a formação de um agregado onde Router é a raiz agregada,
e Switch e Network são os objetos usados para compor o agregado.


Para configurar corretamente o gerenciador de entidades, criamos o
arquivo resources/ META-INF/persistence.xml com uma propriedade para configurar o banco de dados H2



Lembre-se, nosso modelo de domínio vem primeiro, então não queremos acoplar o sistema com tecnologia de
banco de dados. É por isso que precisamos criar uma classe RouterData ORM para mapear diretamente para os
tipos de banco de dados