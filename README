APLICATIVO:
Sistema que gerencia o inventário de topologia e rede de uma empresa
de telecomunicações



mvn archetype:generate -DgroupId=com.arquiteturahexagonal -DartifactId=arquiteturahexagonal -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false


No adaptador REST, temos o método httpParams para recuperar dados de uma solicitação HTTP
Agora, em processRequest do adaptador CLI, temos um método stdinParams para recuperar dados do console.
Os métodos processRequest dos adaptadores REST e CLI têm diferenças em como eles manipulam
dados de entrada, mas ambos têm uma coisa em comum. Uma vez que eles capturam dados de
entrada na variável params , ambos chamam o método addNetworkToRouter herdado da classe base do adaptador
Deste ponto em diante, os dados seguem o mesmo fluxo descrito no cenário do adaptador REST, onde o
adaptador de entrada chama a porta de entrada por meio de uma referência de interface de caso de uso.


compilar: mvn clean package
Para chamar o adaptador REST, execute o arquivo .jar com o parâmetro rest: $ java -jar target/chapter04-1.0-SNAPSHOT-jar-with-dependencies.
                                                                           jar rest
                                                                           REST endpoint listening on port 8080…
Assim que o aplicativo estiver em execução, você pode iniciar uma solicitação HTTP GET para criar e adicionar uma rede: curl -vv "http://localhost:8080/network/add?routerId=ca23800e9b5a-11eb-a8b3-0242ac130003&address=40.0.0.0&name=Finance&c
Para chamar o adaptador CLI, execute o arquivo .jar sem parâmetros: $ java -jar target/chapter04-1.0-SNAPSHOT-jar-with-dependencies.
                                                                    jar cli
                                                                    Please inform the Router ID:
                                                                    ca23800e-9b5a-11eb-a8b3-0242ac130003
                                                                    Please inform the IP address:
                                                                    40.0.0.0
                                                                    Please inform the Network Name:
                                                                    Finance
                                                                    Please inform the CIDR:
                                                                    8 idr=8"

O aplicativo pedirá que você especifique o ID do roteador e outros detalhes adicionais da rede para chamar o adaptador
CLI. Aqui, fornecemos os mesmos dados usados para chamar o adaptador REST.



Os adaptadores de entrada são as portas da frente pelas quais acessamos todos os recursos que um aplicativo
hexagonal pode fornecer. Com adaptadores de entrada, podemos facilmente tornar o sistema acessível por meio de
diferentes tecnologias sem perturbar a lógica de negócios. Da mesma forma, podemos fazer o aplicativo hexagonal
falar com várias fontes de dados. Fazemos isso com adaptadores de saída.


Adaptadores de saída são implementações das portas de saída que criamos no hexágono de aplicação


Embora os switches e as redes tenham chaves primárias, tratamos os switches como entidades e redes
como objetos de valor que são parte da entidade Router no modelo de domínio. Estamos
impondo nosso modelo no arranjo tecnológico e não o contrário.

Não usamos essas chaves primárias das tabelas switches e networks como referências no
modelo de domínio. Em vez disso, usamos o valor router_id para correlacionar a entidade
Router com seus objetos de valor Switch e Network e suas respectivas tabelas de banco de
dados. Essa correlação permite a formação de um agregado onde Router é a raiz agregada,
e Switch e Network são os objetos usados para compor o agregado.


Para configurar corretamente o gerenciador de entidades, criamos o
arquivo resources/ META-INF/persistence.xml com uma propriedade para configurar o banco de dados H2



Lembre-se, nosso modelo de domínio vem primeiro, então não queremos acoplar o sistema com tecnologia de
banco de dados. É por isso que precisamos criar uma classe RouterData ORM para mapear diretamente para os
tipos de banco de dados

Ao criar esses dois adaptadores de saída, habilitamos o aplicativo hexagonal a falar com
diferentes fontes de dados. A melhor parte foi que não precisamos alterar nada nos hexágonos Domain.
O único requisito para criar um adaptador de saída é implementar uma interface de porta de saída do
hexágono Application. Esses exemplos de adaptador de saída mostraram como uma abordagem hexagonal
protege a lógica de negócios de preocupações tecnológicas. Claro, há uma compensação quando decidimos
seguir esse caminho. No entanto, se pretendemos tornar os sistemas tolerantes a mudanças centralizados
no modelo de domínio, a arquitetura hexagonal fornece as técnicas necessárias para isso.

Aprendemos neste capítulo que os adaptadores são usados para definir as tecnologias que são suportadas por
um aplicativo hexagonal. Criamos dois adaptadores de entrada para permitir operações de condução, ou seja,
um adaptador REST para receber dados de conexões HTTP e um adaptador CLI para receber dados de STDIN.
Ambos os adaptadores de entrada foram anexados à mesma porta de entrada, permitindo que o sistema
hexagonal usasse a mesma lógica para processar solicitações vindas em formatos distintos.
Então, criamos um adaptador de saída de banco de dados H2 e um adaptador de saída de arquivo JSON para
permitir que o aplicativo hexagonal se comunique com diferentes fontes de dados. Esses dois adaptadores
de saída foram anexados à mesma porta de saída, permitindo que o sistema hexagonal persistisse e obtivesse
dados de fontes externas para que a tecnologia da fonte de dados não influenciasse a lógica de negócios


O aplicativo frontend permitirá que os usuários adicionem redes a um roteador existente e visualizem uma
representação gráfica do roteador e suas redes.



Agentes de teste como meios de conduzir operações (drivin - operações de condução de entrada)

Agentes de teste: Executando coleção de testes com POSTMAN  Newman:
newman run nomedoarquivo.json

Esse tipo de execução de teste usando Newman é ideal para integrar o aplicativo hexagonal em
pipelines de Integração Contínua (CI). Os desenvolvedores usam o Postman para criar coleções e
seus respectivos testes, e essas mesmas coleções são acionadas e validadas por meio de
ferramentas de CI (como Jenkins) que podem usar Newman para executar os testes.


As operações de condução vêm das solicitações do ator primário que conduzem o comportamento de
um sistema hexagonal, enquanto as operações conduzidas são as solicitações iniciadas pelo próprio aplicativo
hexagonal em direção a atores secundários (como bancos de dados ou outros sistemas).


A página Events segue a mesma estrutura que usamos nas páginas anteriores. A parte importante
desta página é o código JavaScript utilizado para conectar usuários ao servidor WebSocket
exposto por nossa aplicação hexagonal.

O método onmessage cria e anexa um novo elemento HTML div para cada nova mensagem
recebida da conexão WebSocket. Então, cada evento gerado pelo aplicativo hexagonal
será enviado para o Kafka e impresso em tempo real no aplicativo frontend.

Para testar esse fluxo, certifique-se de ter sua instância local do Kafka em execução. Então, inicie o aplicativo hexagonal:
java -jar target/topology-inventory-1.0-SNAPSHOT-jar-withdependencies.jar rest
docker-compose up -d
docker exec -it kafka kafka-topics --create --topic topology-inventory-events --bootstrap-server localhost:9092 --partitions 1 --replication-factor 1

Para criar uma conexão WebSocket entre seu navegador e o aplicativo, você precisa abrir a
página Eventos do aplicativo frontend. Para ver os dados fluindo para a página Eventos, tente
adicionar uma rede ou recuperar um roteador usando o ID ca23800e-9b5a-11eba8b3-0242ac130003.
As entradas de eventos aparecerão na página Eventos (bug - não aparece na pagina, o evento aparece somente no terminal de execução, e só aparece o evento de adição de rede não o evento de recuperação)

Essa integração usando Kafka e WebSockets nos mostrou como um aplicativo hexagonal lida com operações
orientadas a mensagens. Não precisamos tocar na lógica de negócios para adicionar essas tecnologias. Tudo
o que tivemos que fazer foi criar mais portas e adaptadores para aumentar as capacidades do sistema.




Servidores simulados (mock servers)

A abordagem típica para desenvolvimento de software é ter múltiplos ambientes, como desenvolvimento, QA
e produção. Os primeiros lançamentos de software funcionais começam a ir para ambientes de desenvolvimento
e, então, progressivamente, seguem para produção. Essa jornada para produção é geralmente conduzida por
pipelines de CI que validam e garantem constantemente que o software está funcionando bem.
Entre as validações de CI, testes unitários e de integração podem acontecer durante a execução do pipeline. Integração
Os testes, em particular, dependem de componentes externos, como outros aplicativos, sistemas, bancos de
dados e serviços – todos eles fornecidos em ambientes diferentes.
A execução de testes de integração em ambientes de desenvolvimento apresenta baixo risco, mas
pode causar problemas se houver, por exemplo, uso simultâneo de recursos. Esse problema de
simultaneidade pode gerar inconsistência nos resultados dos testes. Para QA, a situação é um pouco mais complicada
porque devemos garantir  consistência ao lidar com dados de teste explicitamente adaptados a cenários específicos. Se esses dados de teste
mudarem inadvertidamente, podemos encontrar inconsistências nos resultados dos testes. Precisamos ter
cuidado porque o custo de falhas de teste em QA é ainda maior do que em ambientes de desenvolvimento.
Para superar obstáculos de teste, algumas ferramentas simulam endpoints de aplicativos e suas respostas.
Começando com as operações de condução, aprendemos que elas conduzem o comportamento do aplicativo
hexagonal chamando seus adaptadores de entrada. Para ilustrar as operações de condução, primeiro criamos
um aplicativo frontend para desempenhar o papel de um ator primário solicitando dados por meio dos adaptadores
de entrada fornecidos pela topologia e pelo aplicativo hexagonal de inventário. Então, para explorar as ferramentas
de teste como operações de condução, criamos uma coleção Postman com testes baseados em endpoints de API expostos pelo aplicativAo lidar com diferentes tipos de operações de acionamento e acionadas, agora podemos compreender melhor o
funcionamento interno de um sistema hexagonal, seus arredores e como as operações de acionamento e
acionadas influenciam a aplicação hexagonal.
No lado das operações conduzidas, vimos como habilitar o aplicativo hexagonal para trabalhar com sistemas
baseados em mensagens, como o Kafka. Para entender melhor os efeitos dos sistemas baseados em mensagens
no aplicativo hexagonal, criamos portas e adaptadores que habilitaram o aplicativo a enviar e consumir mensagens
do Kafka. Além disso, criamos um servidor WebSocket para permitir que o aplicativo frontend recupere os
eventos gerados pelo sistema hexagonal em tempo real.
Os fundamentos adquiridos neste capítulo e nos anteriores fornecem todos os blocos de construção para
começar a desenvolver sistemas robustos e tolerantes a mudanças com os instrumentos de arquitetura hexagonal.
Essas ferramentas são conhecidas como soluções simuladas e vêm em várias formas e tamanhos. Você pode
simular manualmente as respostas e endpoints de um serviço que seu aplicativo precisa; no entanto, isso nem
sempre é trivial e pode exigir um esforço considerável. Além disso, existem ferramentas sofisticadas que fazem
o trabalho sujo e permitem que você se concentre apenas na lógica. Essa é a função dos servidores de simulação.

Como os servidores de simulação atuam como uma entidade externa que fornece recursos úteis ao aplicativo, nós
também os consideramos  atores secundários impulsionados por um sistema hexagonal que quer alavancar recursos de servidor simulados em vez de atingir sistemas reais.


Começando com as operações de condução, aprendemos que elas conduzem o comportamento do aplicativo
hexagonal chamando seus adaptadores de entrada. Para ilustrar as operações de condução, primeiro criamos
um aplicativo frontend para desempenhar o papel de um ator primário solicitando dados por meio dos adaptadores
de entrada fornecidos pela topologia e pelo aplicativo hexagonal de inventário. Então, para explorar as ferramentas
de teste como operações de condução, criamos uma coleção Postman com testes baseados em endpoints de API expostos pelo
hexagono de aplicação.

No lado das operações conduzidas, vimos como habilitar o aplicativo hexagonal para trabalhar com sistemas
baseados em mensagens, como o Kafka. Para entender melhor os efeitos dos sistemas baseados em mensagens
no aplicativo hexagonal, criamos portas e adaptadores que habilitaram o aplicativo a enviar e consumir mensagens
do Kafka. Além disso, criamos um servidor WebSocket para permitir que o aplicativo frontend recupere os
eventos gerados pelo sistema hexagonal em tempo real.

Ao lidar com diferentes tipos de operações de condução (drivin/entrada) e conduzidas(driven/saída), agora podemos compreender melhor o
funcionamento interno de um sistema hexagonal, seus arredores e como as operações de condução e
conduzidas influenciam a aplicação hexagonal.


